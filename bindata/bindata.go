// Code generated by go-bindata.
// sources:
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\xcf\x8e\x9b\x30\x10\xc6\xef\xf3\x14\x48\x3d\xec\x6d\xd3\x55\x2f\xd1\x4a\x3e\x38\xe0\x24\xd6\x02\x46\xb6\x93\xed\x76\x85\x2c\x02\x56\x41\x82\x75\x6a\x3b\xad\xf2\xf6\xb5\x61\x13\xb5\xe2\xc0\xcc\xc7\xf0\xfd\xe6\xcf\xbb\xd3\xf6\xb7\xb6\x35\xe0\xaa\x52\x47\xc2\xd1\xd7\xc7\xa7\x39\x2e\x71\x41\xd0\xde\x8c\x9d\xb6\x6d\xaf\xa7\x44\x98\x8b\x6d\x75\xb2\xbb\x0c\x9d\x9e\x0b\x0e\x3c\x47\xbd\xf7\xe7\xe7\xd5\x6a\x34\x6d\x33\xf6\xc6\xf9\xe7\xf5\x7a\xfd\xb4\x82\x8a\x33\xc9\x52\xb6\x7c\x87\x8c\x15\x98\x96\xe8\x5e\x04\x7b\x29\x2b\x85\xb3\x2c\xc2\xe6\x67\x51\x2a\xc6\x25\x8a\x06\xc0\x0f\xa5\x2a\x58\x46\x50\xf2\x45\x4f\x67\x7f\x4d\x8c\x4d\x1e\xce\xd6\x74\x0f\x90\x12\x2e\xd5\x96\xe6\x04\xc1\x0b\x79\xfb\x8c\x04\x49\x39\x91\x2a\x08\x21\x96\x58\xd2\x54\x71\xc6\xa4\xaa\xb0\xdc\x23\xc8\xa8\xc0\x9b\x9c\x04\xe9\x20\x09\x57\x39\xdb\x21\x80\x30\xb7\x73\x83\xf9\xa8\x63\xb3\x47\x9a\x85\xc9\x27\x3d\x19\x7b\xbd\xe7\x2a\x65\xe5\x96\x86\xda\x94\xb1\x17\x4a\x96\x85\xdc\x92\x40\x3c\xf0\x90\xee\x52\x45\xcb\xe0\x7a\xc4\xb9\x92\xb4\x98\x7b\x11\x82\xb2\x52\xe5\x74\x4b\x3e\xa5\x08\x6b\x2f\x76\xf0\xd7\xfa\xdf\x56\xdd\x38\x4c\xfa\xfa\xa7\xf1\xda\xba\x9b\xef\x41\x04\xf0\x7f\x24\x4e\x0a\x52\x6c\xee\x2a\xbc\x77\x8d\x6f\x4e\x8d\xd3\x35\x64\x1b\x25\xdf\x2a\x82\xdc\xaf\x71\xf0\xfa\x5b\x58\xd6\xe0\x7b\x6d\x93\x5b\x1e\xb6\x66\xba\x53\x0b\x7b\x26\x24\x82\xe5\xff\x08\x40\x50\x61\x21\x5e\xb3\xf8\x0e\x0b\x8a\x86\xab\xbe\x75\x3f\x1f\xbb\x53\xf0\xf7\xa1\xab\x1a\xb6\x8c\x17\x58\x46\x5e\xe3\x7d\xd3\xf6\x93\xfe\xf0\xf5\x52\x0f\x38\xcf\xd9\x2b\xc9\x66\xb8\x08\x37\x6a\xcd\x34\x35\x89\xd3\xe7\xc6\x86\x61\x3a\x28\xf0\x77\x25\xe8\x8f\x40\x8b\x51\x3c\x91\x40\x40\xca\x78\x04\xf4\x37\x00\x00\xff\xff\x56\xbf\x92\xef\x70\x02\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 624, mode: os.FileMode(420), modTime: time.Unix(1449918392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

