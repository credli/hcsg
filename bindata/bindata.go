// Code generated by go-bindata.
// sources:
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x51\xc1\x8e\xda\x30\x10\xbd\xfb\x2b\x22\xf5\xb0\xb7\xa5\xab\x5e\xd0\x4a\x3e\x98\xd8\x80\xb5\x49\x1c\xd9\x86\x2d\x5d\x45\x56\x48\xac\x26\x12\x59\x53\xdb\xb4\xe2\xef\x3b\x86\x85\x76\x95\x43\x66\x9e\x47\xef\xbd\x79\xf3\x16\xac\xff\x6d\x7d\x83\x48\x5d\x9b\x2d\x93\xf8\xeb\xe3\xd3\xa5\xae\x48\xc9\xf0\xda\x1d\x7a\xeb\xbb\xc1\x4e\x99\x72\x27\xdf\xd9\x6c\x75\x1a\x7b\x7b\x19\xd8\xc8\x02\x0f\x31\x1e\x9f\x67\xb3\x83\xeb\xda\xc3\xe0\x42\x7c\x9e\xcf\xe7\x4f\x33\x54\x4b\xa1\x45\x2e\xae\xef\x88\x8a\x92\xf0\x0a\xdf\x87\xd0\x5a\xeb\xda\x10\x4a\x93\xd8\xe5\xbb\x22\xb5\x90\x1a\x27\x02\x24\x37\x95\x29\x05\x65\x38\xfb\x62\xa7\x63\x3c\x67\xce\x67\x0f\x47\xef\xfa\x07\x94\x33\xa9\xcd\x92\x17\x0c\xa3\x17\xb6\xfb\xa8\x14\xcb\x25\xd3\x06\x00\xa8\x35\xd1\x3c\x37\x52\x08\x6d\x6a\xa2\xd7\x18\x51\xae\xc8\xa2\x60\x00\x6d\x34\x93\xa6\x10\x2b\x8c\x10\xec\x1d\xc2\xe8\xde\x9b\x64\x76\xcb\x29\x6c\x3e\xd9\xc9\xf9\xf3\xbd\x37\xb9\xa8\x96\x1c\x66\x73\x21\x5e\x38\xbb\x06\x72\x6b\x40\x71\x23\xa1\x5d\xe5\x86\x57\xc0\xba\x25\x85\xd1\xbc\xbc\x78\x51\x8a\x8b\xca\x14\x7c\xc9\x3e\xa0\x24\xd6\x9d\xfc\x18\xcf\xcd\xff\x56\xc3\x61\x9c\xec\xf9\x4f\x1b\xad\x0f\x37\xde\x8d\x02\xe1\x4f\x4a\x92\x95\xac\x5c\xdc\x51\x70\xcf\xab\x7f\x20\x25\x3b\x05\x02\xe8\xad\x6f\x63\xbb\x6f\x83\x6d\x10\x5d\x18\xbd\xab\x19\x0e\xbf\x0e\x63\xb4\xdf\x20\xc2\x31\x0e\xd6\x67\xb7\x1e\xb2\x74\xfd\xbe\x43\x6b\xa1\x34\x46\x57\xd6\x24\x8b\x51\x4d\x94\x7a\xa5\xe9\x0f\xb1\x25\xc2\xd9\xd0\x85\x9f\x8f\xfd\x1e\xf8\x23\x78\x6d\xd0\x52\xc8\x92\xe8\xb4\x51\x1b\x63\xdb\x0d\x93\x7d\x8f\xcd\x75\x1e\x91\xa2\x10\xaf\x8c\x5e\xc4\x15\x5c\xae\x73\xd3\xd4\x66\xc1\x1e\x5b\x0f\x2b\xf6\xa8\x24\xdf\x8d\xe2\x3f\x40\x2d\x55\xe9\x70\xe0\x9c\x55\xe9\x34\xf8\x6f\x00\x00\x00\xff\xff\x00\x66\x59\x60\x86\x02\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 646, mode: os.FileMode(420), modTime: time.Unix(1450018744, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

